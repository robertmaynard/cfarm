{"name":"CFarm","tagline":"Making cross-platform development faster.","body":"###CFarm###\r\n\r\nCFarm goal is to keep numerous machines in sync when developing cross platform\r\nC++ projects. You can think of a private continuous testing, without any fancy\r\nreporting, user interface, or other 'features' that other tools have.\r\n\r\n\r\n##Reason##\r\n\r\nThe standard problem I have is when developing on a single platform,\r\nI introduce subtle cross platform breaking code, things like using\r\nc99 types, or using a C++11 method from stl.\r\n\r\nNow I can commit these breaks, and send the branch for review where\r\nit will get sniffed out and reported, but the turnaround for that is\r\nincredibly high.\r\n\r\nLikewise I generally switch between machines to replicate these breaks,\r\nand every time I do that I need to recheck out the code and generally go\r\nthrough the entire configuration, compilation, test process.\r\n\r\n\r\n##Setup Development Machine##\r\n\r\nTo use cfarm you need a setup a configuration per project. This is\r\ndone by creating a .cfarm folder in the root of your git repo that\r\nyou want cfarm to work on (Yes cfarm only supports git, I said cfarm\r\nhas no features).\r\n\r\nThe folder will look something like:\r\n```\r\n.cfarm/\r\n  - metaverse.cdep\r\n  - deliverator.cdep\r\n  - bigboard.cdep\r\n```\r\n\r\nEach .cdep file will describe how to deploy the project to a machine.\r\nEach file name is the cfarm workers name, allowing you to have multiple workers\r\nthat point to the same physical machine. Here is an example .cdep file:\r\n\r\n```\r\n{\r\n\"hostname\" : \"bigboard\",\r\n\"user\" : \"hiro\",\r\n\"cpp_compiler\" : \"/usr/bin/g++-4.6\",\r\n\"src_location\" : \"/home/hiro/Work/bigboard/src\",\r\n\"build_location\" : \"/home/hiro/Work/bigboard/build\",\r\n\"build_generator\" : \"Ninja\",\r\n\"build_flags\" : \"-j8\"\r\n}\r\n```\r\n\r\nHere is a list of required settings for a .cdep file:\r\n- hostname = computer name, or ip address of worker\r\n- user = the user we are going to log in as\r\n- src_location = the location to store the source for the current project\r\n- build_location = the location to build the project\r\n- build_generator = the CMake generator to use for building.\r\nAll CMake generators are currently supported. For Generators like Visual Studio\r\nyou will also need to specify the option build_configuration option.\r\n\r\nHere is a list of optional settings for a .cdep file:\r\n- c_compiler : Absolute path to the c compiler\r\n- cpp_compiler : Absolute path to the c++ compiler\r\n- library_type : State if you want to build Statically or Shared.\r\n- build_flags = list of flags for compilation, generally holds '-j<N>'\r\n- build_configuration = Explicitly state the build configuration type\r\nto use such as Debug, or Release. Needed when you are using multi\r\nconfiguration generators like Visual Studio.\r\n\r\nHere are example of all the optional settings:\r\n\r\n  ```\r\n  \"c_compiler\" : \"/usr/bin/gcc-4.8\",\r\n  \"cpp_compiler\" : \"/usr/bin/g++-4.8\",\r\n  \"library_type\" : \"Shared\",\r\n  \"build_flags\" : \"-j8\",\r\n  \"build_configuration\" : \"Debug\"\r\n  ```\r\n\r\n##How to use cfarm##\r\n\r\ncfarm understands the concepts of setup, build, and test.\r\n\r\nThe Setup command looks like:\r\n\r\n```\r\ncfarm setup metaverse\r\n```\r\n\r\nAs it only supports setting up machines one by one. This is required as we\r\ncurrently launch ccmake on the machine to allow you to configure the starting\r\nbuilding options. Todo: Allow the user to resetup a machine to switch just\r\nconfigure options\r\n\r\nThe build and test command have two ways to be called:\r\n\r\n```\r\n cfarm build all\r\n cfarm build deliverator\r\n\r\n cfarm test all\r\n cfarm test bigboard metaverse\r\n```\r\n\r\ncfarm also allows you to sent options down to the workers at build\r\nand test time, it does this by sending all arguments passed after the\r\nfirst '--' down to the command line.\r\n\r\nSo to specify a specific target for all workers to build you would use the\r\nfollowing command line:\r\n\r\n```\r\ncfarm build all -- --target Sword\r\n```\r\n\r\nTo specify to run tests that match a ctest regular expression you would\r\nuse:\r\n\r\n```\r\ncfarm test all -- -R UnitTestSword\r\n```\r\n\r\n##Requirements##\r\n\r\n```\r\nPython 2.6 or 2.7\r\nFabric\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}